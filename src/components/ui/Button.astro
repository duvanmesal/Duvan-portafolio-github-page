---
interface Props {
  id?: string;
  variant?: 'default' | 'outline' | 'ghost' | 'link';
  size?: 'default' | 'sm' | 'lg';
  class?: string;
  href?: string;
  target?: string;
  rel?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
}

const {
  variant = 'default',
  size = 'default',
  class: className = '',
  href,
  target,
  rel,
  type = 'button',
  disabled = false,
  ...rest
} = Astro.props;

const variantClasses = {
  default: 'bg-primary text-primary-foreground hover:bg-primary/90',
  outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
  ghost: 'hover:bg-accent hover:text-accent-foreground',
  link: 'text-primary underline-offset-4 hover:underline',
};

const sizeClasses = {
  default: 'h-10 px-4 py-2',
  sm: 'h-9 rounded-md px-3',
  lg: 'h-11 rounded-md px-8',
};

const baseClasses = 'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background';
const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;

const isLink = !!href;
---

{
  isLink ? (
    <a
      href={href}
      target={target}
      rel={rel}
      class={classes}
      {...rest}
    >
      <slot />
    </a>
  ) : (
    <button
      type={type}
      class={classes}
      disabled={disabled}
      {...rest}
    >
      <slot />
    </button>
  )
}

